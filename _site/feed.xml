<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-09T14:34:36+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Technology</title><subtitle>I write about Linux and Ubuntu, and the FOSS tools available to photographers</subtitle><author><name>Paul Dürnberger</name></author><entry><title type="html">Pandoc Again</title><link href="http://localhost:4000/2022/06/09/pandoc-again/" rel="alternate" type="text/html" title="Pandoc Again" /><published>2022-06-09T00:00:00+01:00</published><updated>2022-06-09T00:00:00+01:00</updated><id>http://localhost:4000/2022/06/09/pandoc-again</id><content type="html" xml:base="http://localhost:4000/2022/06/09/pandoc-again/"><![CDATA[<p>Using pandoc and weasyprint to create a letter template, but this time a little more elegantly!</p>

<!--more-->

<p>In an earlier post, <a href="/2022/05/05/pandoc" target="_blank">Pandoc</a>, I created a bash script to convert a <code class="language-plaintext highlighter-rouge">markdown</code> file to a <code class="language-plaintext highlighter-rouge">pdf</code>. The final version converted all markdown files within a defined folder.</p>

<p>Using the script shown below, a list of markdown documents is displayed. You can then select one of those documents for conversion. The rest would remain untouched.</p>

<p>The key is these 2 lines;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>files="$(ls --file-type *.md)"

select filename in ${files};
</code></pre></div></div>

<p>The first line lists the markdown files in the given directory, whilst the second line allow you to select one file from the list, and for that file to be processed.</p>

<p>Much neater!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c">#</span>
<span class="c"># ~/bin/write2pdf.sh</span>
<span class="c">#</span>
<span class="c"># With thanks to:</span>
<span class="c"># https://linuxconfig.org/how-to-create-a-selection-menu-using-the-select-statement-in-bash-shell</span>
<span class="c">#</span>

<span class="nb">cd</span> /home/<span class="nv">$USER</span>/Correspondence

<span class="c"># Choose from letter, memo or note</span>
<span class="c">#</span>
<span class="nb">echo</span> <span class="s2">"Are you writing a letter, memo or note?"</span>
<span class="nb">echo</span> <span class="s2">"1) Letter"</span>
<span class="nb">echo</span> <span class="s2">"2) Memo"</span>
<span class="nb">echo</span> <span class="s2">"3) Note"</span>
<span class="nb">read </span>choice


<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$choice</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"1"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="c"># Letter</span>

	<span class="nv">PS3</span><span class="o">=</span><span class="s2">"Select a file:"</span>

	<span class="nv">files</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">--file-type</span> <span class="k">*</span>.md<span class="si">)</span><span class="s2">"</span>

	<span class="k">select </span>filename <span class="k">in</span> <span class="k">${</span><span class="nv">files</span><span class="k">}</span><span class="p">;</span>

		<span class="k">do

		</span><span class="nv">stem</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> .md<span class="si">)</span>

		pandoc <span class="nt">-f</span> markdown <span class="nt">--include-before-body</span> layout/header-letter.html <span class="nt">--include-after-body</span> layout/footer.html <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"</span><span class="nv">$stem</span><span class="s2">"</span> <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="nt">--pdf-engine</span> weasyprint <span class="nt">--css</span> style/style.css <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> <span class="nt">-o</span> <span class="nv">$stem</span>.pdf

			<span class="nb">break</span><span class="p">;</span>

		<span class="k">done</span>
<span class="c"># End of letter</span>




<span class="k">elif</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$choice</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"2"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
<span class="c"># Memo</span>

	<span class="nv">PS3</span><span class="o">=</span><span class="s2">"Select a file:"</span>

	<span class="nv">files</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">--file-type</span> <span class="k">*</span>.md<span class="si">)</span><span class="s2">"</span>

	<span class="k">select </span>filename <span class="k">in</span> <span class="k">${</span><span class="nv">files</span><span class="k">}</span><span class="p">;</span>

		<span class="k">do

		</span><span class="nv">stem</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> .md<span class="si">)</span>

		pandoc <span class="nt">-f</span> markdown <span class="nt">--include-before-body</span> layout/header-memo.html <span class="nt">--include-after-body</span> layout/footer.html <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"</span><span class="nv">$stem</span><span class="s2">"</span> <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="nt">--pdf-engine</span> weasyprint <span class="nt">--css</span> style/style.css <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> <span class="nt">-o</span> <span class="nv">$stem</span>.pdf

			<span class="nb">break</span><span class="p">;</span>

		<span class="k">done</span>
<span class="c"># End of memo</span>



<span class="k">else</span>
<span class="c"># Note</span>
	<span class="nv">PS3</span><span class="o">=</span><span class="s2">"Select a file:"</span>

	<span class="nv">files</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">ls</span> <span class="nt">--file-type</span> <span class="k">*</span>.md<span class="si">)</span><span class="s2">"</span>

	<span class="k">select </span>filename <span class="k">in</span> <span class="k">${</span><span class="nv">files</span><span class="k">}</span><span class="p">;</span>

		<span class="k">do

		</span><span class="nv">stem</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> .md<span class="si">)</span>

		pandoc <span class="nt">-f</span> markdown <span class="nt">--include-before-body</span> layout/header-note.html <span class="nt">--include-after-body</span> layout/footer.html <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"</span><span class="nv">$stem</span><span class="s2">"</span> <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="nt">--pdf-engine</span> weasyprint <span class="nt">--css</span> style/style.css <span class="k">${</span><span class="nv">filename</span><span class="k">}</span> <span class="nt">-o</span> <span class="nv">$stem</span>.pdf

			<span class="nb">break</span><span class="p">;</span>

		<span class="k">done</span>
<span class="c"># End of note</span>

<span class="k">fi</span>
</code></pre></div></div>

<p>With thanks to <a href="https://linuxconfig.org/how-to-create-a-selection-menu-using-the-select-statement-in-bash-shell" target="_blank">Linuxconfig.org</a> for setting me on the right track.</p>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="bash" /><category term="pandoc" /><category term="pdf" /><category term="weasyprint" /><summary type="html"><![CDATA[Using pandoc and weasyprint to create a letter template, but this time a little more elegantly!]]></summary></entry><entry><title type="html">i3blocks</title><link href="http://localhost:4000/2022/06/03/i3blocks/" rel="alternate" type="text/html" title="i3blocks" /><published>2022-06-03T00:00:00+01:00</published><updated>2022-06-03T00:00:00+01:00</updated><id>http://localhost:4000/2022/06/03/i3blocks</id><content type="html" xml:base="http://localhost:4000/2022/06/03/i3blocks/"><![CDATA[<p>As an alternative to the i3status bar, we have i3blocks.</p>

<!--more-->

<p>Begin by copying the generic conf file across to your user ~/.config/i3 directory;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /etc/i3blocks.conf ~/.config/i3/i3blocks.conf
</code></pre></div></div>

<p>Next, and open <code class="language-plaintext highlighter-rouge">.config/i3/config</code>, find the <code class="language-plaintext highlighter-rouge">status bar</code> section and change <code class="language-plaintext highlighter-rouge">status_command</code> from <code class="language-plaintext highlighter-rouge">i3status</code> to</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i3blocks <span class="nt">-c</span> ~/.config/i3/i3blocks.conf
</code></pre></div></div>

<p>Now, edit and save <code class="language-plaintext highlighter-rouge">~/.config/i3/i3blocks.conf</code> to suit. Below is my current version.</p>

<p>It might just be me, but is this a little easier to configure than i3status?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># i3blocks config file</span>
<span class="c">#</span>
<span class="c"># Please see man i3blocks for a complete reference!</span>
<span class="c"># The man page is also hosted at http://vivien.github.io/i3blocks</span>
<span class="c">#</span>
<span class="c"># List of valid properties:</span>
<span class="c">#</span>
<span class="c"># align</span>
<span class="c"># color</span>
<span class="c"># command</span>
<span class="c"># full_text</span>
<span class="c"># instance</span>
<span class="c"># interval</span>
<span class="c"># label</span>
<span class="c"># min_width</span>
<span class="c"># name</span>
<span class="c"># separator</span>
<span class="c"># separator_block_width</span>
<span class="c"># short_text</span>
<span class="c"># signal</span>
<span class="c"># urgent</span>

<span class="c"># Global properties</span>
<span class="c">#</span>
<span class="c"># The top properties below are applied to every block, but can be overridden.</span>
<span class="c"># Each block command defaults to the script name to avoid boilerplate.</span>
<span class="nb">command</span><span class="o">=</span>/usr/share/i3blocks/<span class="nv">$BLOCK_NAME</span>
<span class="nv">separator_block_width</span><span class="o">=</span>15
<span class="nv">markup</span><span class="o">=</span>none

<span class="c"># Update status</span>
<span class="o">[</span>updates]
<span class="nv">label</span><span class="o">=</span>
<span class="nv">interval</span><span class="o">=</span>3600
<span class="nb">command</span><span class="o">=</span>~/bin/check4updates.sh

<span class="c"># Disk usage</span>
<span class="c">#</span>
<span class="c"># The directory defaults to $HOME if the instance is not specified.</span>
<span class="c"># The script may be called with a optional argument to set the alert</span>
<span class="c"># (defaults to 10 for 10%).</span>
<span class="o">[</span>disk]
<span class="nv">label</span><span class="o">=</span>HOME
<span class="c">#instance=/mnt/data</span>
<span class="nv">interval</span><span class="o">=</span>30

<span class="c"># Memory usage</span>
<span class="c">#</span>
<span class="c"># The type defaults to "mem" if the instance is not specified.</span>
<span class="o">[</span>memory]
<span class="nv">label</span><span class="o">=</span>MEM
<span class="nv">interval</span><span class="o">=</span>30
<span class="nv">separator</span><span class="o">=</span><span class="nb">false</span>

<span class="o">[</span>memory]
<span class="nv">label</span><span class="o">=</span>SWAP
<span class="nv">instance</span><span class="o">=</span>swap
<span class="nv">interval</span><span class="o">=</span>30
<span class="nv">separator</span><span class="o">=</span><span class="nb">true</span>

<span class="c"># Network interface monitoring</span>
<span class="c">#</span>
<span class="c"># If the instance is not specified, use the interface used for default route.</span>
<span class="c"># The address can be forced to IPv4 or IPv6 with -4 or -6 switches.</span>
<span class="o">[</span>iface]
<span class="c">#instance=wlan0</span>
<span class="nv">color</span><span class="o">=</span><span class="c">#00FF00</span>
<span class="nv">interval</span><span class="o">=</span>10
<span class="nv">separator</span><span class="o">=</span><span class="nb">true</span>

<span class="c">#[wifi]</span>
<span class="c">#instance=wlp3s0</span>
<span class="c">#interval=10</span>
<span class="c">#separator=false</span>

<span class="c">#[bandwidth]</span>
<span class="c">#instance=eth0</span>
<span class="c">#interval=5</span>

<span class="c"># CPU usage</span>
<span class="c">#</span>
<span class="c"># The script may be called with -w and -c switches to specify thresholds,</span>
<span class="c"># see the script for details.</span>
<span class="o">[</span>cpu_usage]
<span class="nv">label</span><span class="o">=</span>CPU
<span class="nv">interval</span><span class="o">=</span>5
<span class="nv">min_width</span><span class="o">=</span>CPU:100.00%
<span class="c">#separator=false</span>

<span class="c">#[load_average]</span>
<span class="c">#interval=10</span>

<span class="c"># Battery indicator</span>
<span class="c">#</span>
<span class="c"># The battery instance defaults to 0.</span>
<span class="c">#[battery]</span>
<span class="c">#label=BAT</span>
<span class="c">#label=⚡</span>
<span class="c">#instance=1</span>
<span class="c">#interval=30</span>

<span class="c"># Generic media player support</span>
<span class="c">#</span>
<span class="c"># This displays "ARTIST - SONG" if a music is playing.</span>
<span class="c"># Supported players are: spotify, vlc, audacious, xmms2, mplayer, and others.</span>
<span class="c">#[mediaplayer]</span>
<span class="c">#instance=spotify</span>
<span class="c">#interval=5</span>
<span class="c">#signal=10</span>

<span class="c"># OpenVPN support</span>
<span class="c">#</span>
<span class="c"># Support multiple VPN, with colors.</span>
<span class="c">#[openvpn]</span>
<span class="c">#interval=20</span>

<span class="c"># Temperature</span>
<span class="c">#</span>
<span class="c"># Support multiple chips, though lm-sensors.</span>
<span class="c"># The script may be called with -w and -c switches to specify thresholds,</span>
<span class="c"># see the script for details.</span>
<span class="o">[</span>temperature]
<span class="nv">label</span><span class="o">=</span>TEMP
<span class="nv">interval</span><span class="o">=</span>10

<span class="c"># Volume indicator</span>
<span class="c">#</span>
<span class="c"># The first parameter sets the step (and units to display)</span>
<span class="c"># The second parameter overrides the mixer selection</span>
<span class="c"># See the script for details.</span>
<span class="o">[</span>volume]
<span class="nb">command</span><span class="o">=</span>/usr/share/i3blocks/volume 5 pulse
<span class="nv">label</span><span class="o">=</span>VOL
<span class="c">#label=♪</span>
<span class="nv">instance</span><span class="o">=</span>Master
<span class="c">#instance=PCM</span>
<span class="nv">interval</span><span class="o">=</span>1
<span class="nv">signal</span><span class="o">=</span>5

<span class="c"># Date Time</span>
<span class="c">#</span>
<span class="o">[</span><span class="nb">time</span><span class="o">]</span>
<span class="nb">command</span><span class="o">=</span><span class="nb">date</span> <span class="s1">'+%A %d %B %Y %H:%M:%S'</span>
<span class="nv">interval</span><span class="o">=</span>1

<span class="c"># Key indicators</span>
<span class="c">#</span>
<span class="c"># Add the following bindings to i3 config file:</span>
<span class="c">#</span>
<span class="c"># bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks</span>
<span class="c"># bindsym --release Num_Lock  exec pkill -SIGRTMIN+11 i3blocks</span>
<span class="c">#[keyindicator]</span>
<span class="c">#instance=CAPS</span>
<span class="c">#interval=once</span>
<span class="c">#signal=11</span>

<span class="c">#[keyindicator]</span>
<span class="c">#instance=NUM</span>
<span class="c">#interval=once</span>
<span class="c">#signal=11</span>
</code></pre></div></div>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="i3" /><category term="wm" /><summary type="html"><![CDATA[As an alternative to the i3status bar, we have i3blocks.]]></summary></entry><entry><title type="html">Categories</title><link href="http://localhost:4000/2022/06/02/categories/" rel="alternate" type="text/html" title="Categories" /><published>2022-06-02T00:00:00+01:00</published><updated>2022-06-02T00:00:00+01:00</updated><id>http://localhost:4000/2022/06/02/categories</id><content type="html" xml:base="http://localhost:4000/2022/06/02/categories/"><![CDATA[<p>How to create a page to list posts by categories and which will work on GitHub Pages.</p>

<!--more-->

<p>For each category, create a page. Within the page, add the following script. In this example we are creating a page to display posts assigned to the category <code class="language-plaintext highlighter-rouge">jekyll</code>.</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div id="category"&gt;
  &lt;h2&gt;CATEGORY: Jekyll&lt;/h2&gt;

  <span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">post</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.categories.jekyll</span><span class="w"> </span><span class="p">%}</span>

    &lt;div class="entry"&gt;

      &lt;h3 class="link"&gt;&lt;a href="<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">url</span><span class="w"> </span><span class="p">}}</span>"&gt;<span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">title</span><span class="w"> </span><span class="p">}}</span>&lt;/a&gt;&lt;/h3&gt;

      &lt;p class="excerpt"&gt;
        <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%d %B %Y'</span><span class="w"> </span><span class="p">}}</span>
          &lt;br&gt;
        <span class="p">{{</span><span class="w"> </span><span class="nv">post</span><span class="p">.</span><span class="nv">excerpt</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">strip_html</span><span class="w"> </span><span class="p">}}</span>
      &lt;/p&gt;

    &lt;/div&gt;

  <span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
&lt;/div&gt;
</code></pre></div></div>

<p>With thanks to <a href="https://qfimg.github.io/jekyll-categories/" target="_blank">qfimg.github.io</a></p>]]></content><author><name>Paul Dürnberger</name></author><category term="jekyll" /><category term="categories" /><category term="github" /><category term="liquid" /><summary type="html"><![CDATA[How to create a page to list posts by categories and which will work on GitHub Pages.]]></summary></entry><entry><title type="html">Compton</title><link href="http://localhost:4000/2022/05/31/compton/" rel="alternate" type="text/html" title="Compton" /><published>2022-05-31T00:00:00+01:00</published><updated>2022-05-31T00:00:00+01:00</updated><id>http://localhost:4000/2022/05/31/compton</id><content type="html" xml:base="http://localhost:4000/2022/05/31/compton/"><![CDATA[<p>Compton. A screen compositor that won’t sacrifice speed and responsiveness</p>

<!--more-->

<p>As <a href="https://www.maketecheasier.com/speed-up-linux-desktop-with-compton/" target="_blank">www.maketecheasier.com</a> explain, <em>Compton is a super-lightweight standalone compositor designed to be used in conjunction with Linux desktops. Perfect for older hardware, it is often used by lightweight distros that need a compositor that won’t sacrifice speed and responsiveness</em>.</p>

<p>On a Ubuntu based system, installing Compton is as easy as;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install compton
</code></pre></div></div>

<p>If like me, you wouldn’t know where to start to create the config file, you might also want to install <code class="language-plaintext highlighter-rouge">compton-conf</code>, which provides a user friendly GUI with which to generate the necessasry config file. The file will be saved to <code class="language-plaintext highlighter-rouge">~/.config/compton.conf</code>.</p>

<p>An alternative is to use one of the config files made available by some of the generous souls at <a href="https://gist.github.com/starred" target="_blank">Github Gist</a>. I am presently using one created by <a href="https://gist.github.com/namdinh95" target="_blank">Nam Dinh</a>, which you can find <a href="https://gist.github.com/namdinh95/d820519782b7287a3392fc2f4e210d8e" target="_blank">here</a>. It is working a treat on my machine.</p>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="compositor" /><category term="compton" /><category term="screen" /><summary type="html"><![CDATA[Compton. A screen compositor that won’t sacrifice speed and responsiveness]]></summary></entry><entry><title type="html">Pdf To Image</title><link href="http://localhost:4000/2022/05/16/pdf-to-image/" rel="alternate" type="text/html" title="Pdf To Image" /><published>2022-05-16T00:00:00+01:00</published><updated>2022-05-16T00:00:00+01:00</updated><id>http://localhost:4000/2022/05/16/pdf-to-image</id><content type="html" xml:base="http://localhost:4000/2022/05/16/pdf-to-image/"><![CDATA[<p>How to convert a PDF into image file(s).</p>

<!--more-->

<p>This can be achieved using <code class="language-plaintext highlighter-rouge">pdftoppm</code>, a part of the <code class="language-plaintext highlighter-rouge">poppler-utils</code> package.</p>

<p>To convert a PDF to a PNG:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdftoppm input.pdf outputname -png
</code></pre></div></div>

<p>To convert a PDF to a JPEG:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdftoppm input.pdf outputname -jpeg
</code></pre></div></div>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="jpeg" /><category term="pdf" /><category term="png" /><summary type="html"><![CDATA[How to convert a PDF into image file(s).]]></summary></entry><entry><title type="html">Pandoc</title><link href="http://localhost:4000/2022/05/05/pandoc/" rel="alternate" type="text/html" title="Pandoc" /><published>2022-05-05T00:00:00+01:00</published><updated>2022-05-05T00:00:00+01:00</updated><id>http://localhost:4000/2022/05/05/pandoc</id><content type="html" xml:base="http://localhost:4000/2022/05/05/pandoc/"><![CDATA[<p>Using pandoc and weasyprint to create a letter template.</p>

<!--more-->

<h3 id="directories">Directories</h3>
<p>Within my <code class="language-plaintext highlighter-rouge">documents</code> directory, I have 2 further directories, <code class="language-plaintext highlighter-rouge">layout</code> and <code class="language-plaintext highlighter-rouge">style</code>.</p>

<p>Layout contains <code class="language-plaintext highlighter-rouge">header.html</code> and <code class="language-plaintext highlighter-rouge">footer.html</code>.</p>

<h3 id="header">Header</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"header"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"author"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"contact-details"</span><span class="nt">&gt;</span>
    Address <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    Telephone Number<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
    Email
  <span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"content"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="footer">Footer</h3>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--End of content--&gt;</span>

<span class="nt">&lt;footer&gt;</span>

  <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"signature"</span><span class="nt">&gt;</span> Name

<span class="nt">&lt;/footer&gt;</span>
</code></pre></div></div>

<h3 id="documents">Documents</h3>
<p>I write my letters using markdown documents, which are saved to the <code class="language-plaintext highlighter-rouge">documents</code> directory.</p>

<h3 id="css">CSS</h3>
<p>A stylesheet has been created, and saved to the <code class="language-plaintext highlighter-rouge">style</code> directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>html,
body {
  margin: 0 ;
  padding: 0 ;
}

body {
  background: #fff;
  color: black;
  font-size: 14px;
  font-family: Roboto, "sans-serif";
  line-height: 1.688 ;
}

h1, h2, h3, h4, h5, h6 {
  font-weight: bold;
  text-align: left;
  text-transform: none;
}

p, ul, li, em {
  font-weight: normal;
  text-align: left;
  text-transform: none;
}

em {
  color: red;
}

li {
  padding-bottom: 1.25rem;
}

.author {
  font-size: 2rem;
  text-align: center;
  letter-spacing: 0.5rem;
  text-transform:uppercase;
}

.contact-details {
  font-size: 0.9rem ;
  text-align: center;
}

.content {
  padding-top: 3rem;
}

.signature {
  text-transform: uppercase;
}

footer {
  padding: 5rem 0 2rem 0;
}

blockquote {
  width: 100% ;
  margin-left: 0 /* Push block to right */ ;
	padding: 0.5rem /*Gap between edge of block and text */ ;
  border-left: 0.15rem solid blue ;
  background-color: gray ;
}

blockquote p {
  font-style: italic ;
}

@media print {
  form, iframe, nav, object {
    display: none;
  }
}

@page {
  font-family: Roboto, "sans-serif";
  margin: 20mm;
  size: A4;

  @top-right {
    content: counter(page);
    font-size: 9pt;
    height: 20mm;
    width: 20mm;
    text-align: center;
  }
  @top-center {
    content: '';
  }
  @top-left {
    width: 100%;
  }
  @bottom-right {
    content: 'Text';
    font-size: 9pt;
    height: 12mm;
    width: 100%;
    vertical-align: middle;
  }
  @bottom-center {
    background: #ced4da;
    content: '';
    display: block;
    height: 0.2mm;
    width: 100%;
    opacity: 0.6;
  }
  @bottom-left {
    content: '';
    font-size: 9pt;
    text-transform: uppercase;
    height: 12mm;
    width: 100%;
    vertical-align: middle;
  }
}
</code></pre></div></div>

<h3 id="conversion">Conversion</h3>
<p>To convert the markdown file to PDF, we would need to run the following command;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pandoc <span class="nt">-f</span> markdown <span class="nt">--include-before-body</span> layout/header.html <span class="nt">--include-after-body</span> layout/footer.html <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"Title"</span> <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="nt">--pdf-engine</span> weasyprint <span class="nt">--css</span> style/style.css input.md output.pdf
</code></pre></div></div>

<p>This is rather a lot to remember, so instead write a bash script into which the various switches are defined. I have saved the script as <code class="language-plaintext highlighter-rouge">~/bin/write2pdf.sh</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># write2pdf.sh</span>

pandoc  <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="se">\</span>
        <span class="nt">-f</span> markdown <span class="se">\</span>
        <span class="nt">--include-before-body</span> layout/header.html <span class="se">\</span>
        <span class="nt">--include-after-body</span> layout/footer.html <span class="se">\</span>
        <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"Title"</span><span class="se">\</span>
        <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="se">\</span>
        <span class="nt">--pdf-engine</span> weasyprint <span class="se">\</span>
        <span class="nt">--css</span> style/style.css <span class="se">\</span>
        <span class="nt">-o</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
</code></pre></div></div>

<p><em>Don’t forget to make the script executable</em>.</p>

<p>Now to complete the conversion, simply type the following;</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>write2pdf.sh input.md output.pdf
</code></pre></div></div>

<p>Here’s as alternative script. Instead of appending the input and output file names to the script, why not create a script that simply converts all markdown files within a defined folder?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># ~/bin/write2pdf.sh</span>

<span class="nv">folder</span><span class="o">=</span>/home/paul/Correspondence

<span class="nb">cd</span> <span class="nv">$folder</span> <span class="o">&amp;&amp;</span>

<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.md<span class="p">;</span>

  <span class="k">do

    </span><span class="nv">stem</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$file</span> .md<span class="si">)</span>

    pandoc <span class="nt">-f</span> markdown <span class="nt">--include-before-body</span> layout/header.html <span class="nt">--include-after-body</span> layout/footer.html <span class="nt">--metadata</span> <span class="nv">pagetitle</span><span class="o">=</span><span class="s2">"Title"</span> <span class="nt">--metadata</span> <span class="nv">lang</span><span class="o">=</span><span class="s2">"en-GB"</span> <span class="nt">--pdf-engine</span> weasyprint <span class="nt">--css</span> style/style.css <span class="nv">$file</span> <span class="nt">-o</span> <span class="nv">$stem</span>.pdf

  <span class="k">done

</span><span class="nb">mv</span> <span class="k">*</span>.pdf pdf
<span class="nb">mv</span> <span class="k">*</span>.md writing
</code></pre></div></div>

<p>With thanks to <a href="https://learnbyexample.github.io/customizing-pandoc/" target="_blank">learnbyexample.github.io/customizing-pandoc/</a>, for helping to get me on the right track.</p>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="bash" /><category term="pandoc" /><category term="pdf" /><category term="weasyprint" /><summary type="html"><![CDATA[Using pandoc and weasyprint to create a letter template.]]></summary></entry><entry><title type="html">For Loop</title><link href="http://localhost:4000/2022/04/19/for-loop/" rel="alternate" type="text/html" title="For Loop" /><published>2022-04-19T00:00:00+01:00</published><updated>2022-04-19T00:00:00+01:00</updated><id>http://localhost:4000/2022/04/19/for-loop</id><content type="html" xml:base="http://localhost:4000/2022/04/19/for-loop/"><![CDATA[<p>A simple process to convert a batch of .dot diagrams into the .svg format using a for loop.</p>

<!--more-->

<p>With the help of <code class="language-plaintext highlighter-rouge">Graphviz</code>, I have been creating a number of family trees for use on a family history website. The following is a simple script which, using a <code class="language-plaintext highlighter-rouge">for loop</code>, dispenses with the tedium of individually converting each <code class="language-plaintext highlighter-rouge">.dot</code> file into an <code class="language-plaintext highlighter-rouge">.svg</code> graphic.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">FOLDER</span><span class="o">=</span>/home/<span class="nv">$USER</span>/folder/where/files/located

<span class="nb">cd</span> <span class="nv">$FOLDER</span> <span class="o">&amp;&amp;</span>

<span class="k">for </span>file <span class="k">in</span> <span class="k">*</span>.dot<span class="p">;</span>
  <span class="k">do
    </span><span class="nv">STEM</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="nv">$file</span> .dot<span class="si">)</span>

    dot <span class="nt">-Tsvg</span> <span class="nv">$file</span> <span class="nt">-o</span> <span class="nv">$STEM</span>.svg
  <span class="k">done</span>
</code></pre></div></div>

<p>The script will look for any files with the <code class="language-plaintext highlighter-rouge">.dot</code> suffix in the designated folder. The <code class="language-plaintext highlighter-rouge">basename</code> command will then strip the <code class="language-plaintext highlighter-rouge">.dot</code> suffix from the file name.</p>

<p>The final line is the command to convert the <code class="language-plaintext highlighter-rouge">.dot</code> files found into the <code class="language-plaintext highlighter-rouge">.svg</code> format, and save the converted files with the same file name as the source, but with an <code class="language-plaintext highlighter-rouge">svg</code> suffix.</p>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="bash" /><category term="loop" /><summary type="html"><![CDATA[A simple process to convert a batch of .dot diagrams into the .svg format using a for loop.]]></summary></entry><entry><title type="html">Superscript</title><link href="http://localhost:4000/2022/04/06/superscript/" rel="alternate" type="text/html" title="Superscript" /><published>2022-04-06T00:00:00+01:00</published><updated>2022-04-06T00:00:00+01:00</updated><id>http://localhost:4000/2022/04/06/superscript</id><content type="html" xml:base="http://localhost:4000/2022/04/06/superscript/"><![CDATA[<p>How to use HTML to create sub- and superscript.</p>

<!--more-->

<p>Imagine you’re writing about someone who is 5foot 9 and a quarter inches in height.</p>

<p>Written numerically, 5’ 91/4”, which does not look right.</p>

<p>To ensure the quarter displays correctly, type the following;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5' 9&lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;4&lt;/sub&gt;"
</code></pre></div></div>

<p>The result looks like this: 5’ 9<sup>1</sup>/<sub>4</sub>”.</p>

<p>A lot tidier!</p>]]></content><author><name>Paul Dürnberger</name></author><category term="markdown" /><category term="html" /><category term="subscript" /><category term="superscript" /><summary type="html"><![CDATA[How to use HTML to create sub- and superscript.]]></summary></entry><entry><title type="html">Pdfunite</title><link href="http://localhost:4000/2022/03/26/pdfunite/" rel="alternate" type="text/html" title="Pdfunite" /><published>2022-03-26T00:00:00+00:00</published><updated>2022-03-26T00:00:00+00:00</updated><id>http://localhost:4000/2022/03/26/pdfunite</id><content type="html" xml:base="http://localhost:4000/2022/03/26/pdfunite/"><![CDATA[<p>How to merge several PDF’s into one document.</p>

<!--more-->

<p>To convert several PDf’s into one PDF document, we can use <code class="language-plaintext highlighter-rouge">pdfunite</code>. This is a part of <code class="language-plaintext highlighter-rouge">poppler-utils</code>, which can be installed using the following command;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install poppler-utils
</code></pre></div></div>

<p>To merge the documents, run the following, changing the pdf file names as necessary;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdfunite 1.pdf 2.pdf 3.pdf output.pdf
</code></pre></div></div>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="merge" /><category term="pdf" /><summary type="html"><![CDATA[How to merge several PDF’s into one document.]]></summary></entry><entry><title type="html">Mutt Address Book</title><link href="http://localhost:4000/2022/02/18/mutt-address-book/" rel="alternate" type="text/html" title="Mutt Address Book" /><published>2022-02-18T00:00:00+00:00</published><updated>2022-02-18T00:00:00+00:00</updated><id>http://localhost:4000/2022/02/18/mutt-address-book</id><content type="html" xml:base="http://localhost:4000/2022/02/18/mutt-address-book/"><![CDATA[<p>An address book for the Mutt Email Client.</p>

<!--more-->

<p>Something I’ve been meaning to record since <a href="/2021/09/19/mutt-email">setting up the Mutt email client</a> was how I added an address book.</p>

<p>The simplest option is to use Mutt’s alias file. Begin by creating a blank document, <code class="language-plaintext highlighter-rouge">~/.mutt/mutt-alias</code>.</p>

<p>Next we amend <code class="language-plaintext highlighter-rouge">~/.mutt/muttrc</code> to include reference to the alias file, by adding the following;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Address Book (using ~/.muttrc/mutt-alias)
source ~/.mutt/mutt-alias
set alias_file = "~/.mutt/mutt-alias"
</code></pre></div></div>

<p>Restart mutt, and highlight one of the messages in your inbox. Tap the letter <code class="language-plaintext highlighter-rouge">a</code> and at the bottom of the screen you will be asked what alias you want to assign to the sender of that email. Answer the subsequent questions, and save. The next time you want to email that person, at <code class="language-plaintext highlighter-rouge">To:</code> type in the alias you assigned.</p>]]></content><author><name>Paul Dürnberger</name></author><category term="linux" /><category term="addressbook" /><category term="email" /><category term="mutt" /><summary type="html"><![CDATA[An address book for the Mutt Email Client.]]></summary></entry></feed>